a. Generation of a taxonomic distance matrix
# Load necessary packages
library(taxize)
library(readxl)
library(writexl)

# Read the genus data
genus_data <- read_excel("sup 2", sheet = “Just genus” )
genus_names <- genus_data$Genus  # Assuming the genus names are in a column named "Genus"

# Get taxonomic information for each genus
tax_info <- classification(genus_names, db = "ncbi", verbose = TRUE)

# Modify the extraction of taxonomic ranks to handle missing data
tax_ranks <- sapply(tax_info, function(x) {
  if (is.data.frame(x)) {  # Check if the returned object is a data frame
    # Extract family, order, and class if available
    ranks <- c(
      family = ifelse("family" %in% x$rank, x$name[x$rank == "family"], NA),
      order = ifelse("order" %in% x$rank, x$name[x$rank == "order"], NA),
      class = ifelse("class" %in% x$rank, x$name[x$rank == "class"], NA)
    )
  } else {
    # If the taxon wasn't found, return NA for all ranks
    ranks <- c(family = NA, order = NA, class = NA)
  }
  return(ranks)
})

# Convert to a data frame
tax_ranks <- t(tax_ranks)

# Preview the result
print(tax_ranks)


# Define a simple distance function based on taxonomic rank differences
calculate_taxonomic_distance <- function(tax_ranks) {
  n <- nrow(tax_ranks)
  dist_matrix <- matrix(0, n, n)
  rownames(dist_matrix) <- colnames(dist_matrix) <- rownames(tax_ranks)
  
  for (i in 1:(n - 1)) {
    for (j in (i + 1):n) {
      # Count the number of different ranks (family, order, class)
      diff_count <- sum(tax_ranks[i, ] != tax_ranks[j, ], na.rm = TRUE)
      dist_matrix[i, j] <- dist_matrix[j, i] <- diff_count
    }
  }
  return(dist_matrix)
}

# Calculate the distance matrix based on taxonomic ranks
distance_matrix <- calculate_taxonomic_distance(tax_ranks)

# Export the taxonomic distance matrix to Excel
write_xlsx(as.data.frame(distance_matrix), "taxonomic_distances.xlsx")

b. Construction of PCoA

# Load necessary libraries
library(vegan)
library(ggplot2)
library(readxl)
library(ggforce)
library(plotly)
library(parallel)
library(dplyr)
library(webshot2)  # For saving plots as images

# Load and process the phylogenetic distance matrix
phylo_distance_matrix <- read_excel("path/taxonomic_distances.xlsx")
phylo_distance_matrix <- as.matrix(phylo_distance_matrix)
rownames(phylo_distance_matrix) <- colnames(phylo_distance_matrix) <- genus_names

# Load the enzyme data
file_path <- "sup 2", sheet = “(C N, C A, C T, C AT)/ (L N, L A, L AT)/ (X N, X A, X T, X AT)/ (XI N, XI A, XI T, XI AT) ”
data_list <- lapply(excel_sheets(file_path), function(sheet) read_excel(file_path, sheet = sheet))
parameters <- data_list[[length(data_list)]]
conditions <- data_list[1:(length(data_list) - 1)]

# Log Normalization for species data
log_normalize <- function(df, pseudocount = 1) {
  df[, sapply(df, is.numeric)] <- apply(df[, sapply(df, is.numeric)], 2, function(x) log(x + pseudocount))
  return(df)
}

# Standardization for environmental parameters
standardize <- function(df) {
  df[, sapply(df, is.numeric)] <- scale(df[, sapply(df, is.numeric)])
  return(df)
}

# Normalize species data and standardize environmental parameters
conditions_normalized <- lapply(conditions, function(df) {
  df[, -1] <- log_normalize(df[, -1])  # Exclude the 'Site' column
  df
})
parameters_normalized <- standardize(parameters)

# Define groupings for each condition
condition_names <- c("Normal", "Acidic", "Thermolytic", "Acidothermolytic")
groupings <- lapply(seq_along(condition_names), function(i) {
  ifelse(grepl("D[1-3]", conditions_normalized[[i]]$Site), "Dead", "Alive")
})
names(groupings) <- condition_names

# PCoA, variance calculation, and distances for genus and environmental parameters
pcoa_results_list <- lapply(conditions_normalized, function(condition_data) {
  species_data <- as.matrix(condition_data[, -1])
  sites_in_condition <- condition_data$Site
  
  matching_rows <- parameters$Site %in% sites_in_condition
  env_data <- parameters_normalized[matching_rows, ]
  
  # Ensure env_data contains only numeric columns
  env_data_numeric <- env_data[, sapply(env_data, is.numeric)]
  
  species_data <- species_data[sites_in_condition %in% parameters$Site, ]
  
  # Genus (species) PCoA - Jaccard distance
  dist_matrix_genus <- vegdist(species_data, method = "jaccard")
  pcoa_result_genus <- cmdscale(dist_matrix_genus, k = 3, eig = TRUE)
  
  # Environmental parameter PCoA - euclidean distance
  dist_matrix_env <- vegdist(env_data_numeric, method = "euclidean")
  pcoa_result_env <- cmdscale(dist_matrix_env, k = 3, eig = TRUE)
  
  # Combine results with variance explained
  var_explained_genus <- pcoa_result_genus$eig / sum(pcoa_result_genus$eig) * 100
  var_explained_env <- pcoa_result_env$eig / sum(pcoa_result_env$eig) * 100
  
  scores_genus <- as.data.frame(pcoa_result_genus$points)
  scores_env <- as.data.frame(pcoa_result_env$points)
  scores_genus$Site <- sites_in_condition
  scores_env$Site <- env_data$Site
  
  list(
    scores_genus = scores_genus,
    scores_env = scores_env,
    dist_matrix_genus = dist_matrix_genus,
    dist_matrix_env = dist_matrix_env,
    var_explained_genus = var_explained_genus,
    var_explained_env = var_explained_env
  )
})

# Combine PCoA results and calculate centroids for genus data
combined_scores <- bind_rows(lapply(seq_along(condition_names), function(i) {
  scores <- pcoa_results_list[[i]]$scores_genus
  scores$Condition <- condition_names[i]
  scores$Group <- groupings[[i]]
  return(scores)
}))

centroids <- combined_scores %>%
  group_by(Condition, Group) %>%
  summarize(
    Centroid_V1 = mean(V1, na.rm = TRUE),
    Centroid_V2 = mean(V2, na.rm = TRUE),
    Centroid_V3 = mean(V3, na.rm = TRUE)
  )

# Extract variance explained for axis labels (for genus data)
var_explained_genus <- pcoa_results_list[[1]]$var_explained_genus
xaxis_title_genus <- sprintf('PCoA Axis 1 (%.2f%%)', var_explained_genus[1])
yaxis_title_genus <- sprintf('PCoA Axis 2 (%.2f%%)', var_explained_genus[2])
zaxis_title_genus <- sprintf('PCoA Axis 3 (%.2f%%)', var_explained_genus[3])

# Plot for genus data
pcoa_plot <- plot_ly()

# Define the shape mappings
shape_mapping <- c("Dead" = 'circle', "Alive" = 'cross')
centroid_shape_mapping <- c("Dead" = 'diamond', "Alive" = 'square')
color_mapping <- c("Normal" = 'blue', "Acidic" = 'green', "Thermolytic" = 'purple', "Acidothermolytic" = 'red')

# Add points for each condition and group
for (condition in condition_names) {
  for (group in c("Dead", "Alive")) {
    subset_data <- combined_scores %>% filter(Condition == condition & Group == group)
    subset_centroid <- centroids %>% filter(Condition == condition & Group == group)
    
    # Add points
    pcoa_plot <- pcoa_plot %>% 
      add_trace(
        x = subset_data$V1, y = subset_data$V2, z = subset_data$V3,
        type = 'scatter3d', mode = 'markers',
        marker = list(symbol = shape_mapping[group], size = 10),
        color = I(color_mapping[condition]),
        name = paste(condition, group),
        showlegend = TRUE
      ) %>%
      # Add centroids with appropriate shapes
      add_trace(
        x = subset_centroid$Centroid_V1, y = subset_centroid$Centroid_V2, z = subset_centroid$Centroid_V3,
        type = 'scatter3d', mode = 'markers',
        marker = list(symbol = centroid_shape_mapping[group], size = 10),  # Larger size for centroids
        color = I(color_mapping[condition]),
        name = paste("Centroid", condition, group),
        showlegend = TRUE
      )
  }
}

# Customize layout with explained variance in axis titles for genus
pcoa_plot <- pcoa_plot %>%
  layout(
    scene = list(
      xaxis = list(
        title = xaxis_title_genus,
        titlefont = list(size = 20, color = 'black', family = 'Arial', bold = TRUE),  # Increase font size
        tickfont = list(size = 15, color = 'black', family = 'Arial', bold = TRUE),
        showgrid = FALSE,
        title_standoff = 50  # Adjust this value to move title further from axis
      ),
      yaxis = list(
        title = yaxis_title_genus,
        titlefont = list(size = 20, color = 'black', family = 'Arial', bold = TRUE),  # Increase font size
        tickfont = list(size = 15, color = 'black', family = 'Arial', bold = TRUE),
        showgrid = FALSE,
        title_standoff = 50  # Adjust this value to move title further from axis
      ),
      zaxis = list(
        title = zaxis_title_genus,
        titlefont = list(size = 20, color = 'black', family = 'Arial', bold = TRUE),  # Increase font size
        tickfont = list(size = 15, color = 'black', family = 'Arial', bold = TRUE),
        showgrid = FALSE,
        title_standoff = 50  # Adjust this value to move title further from axis
      ),
      camera = list(eye = list(x = 2, y = 2, z = 1.5))  # Adjust camera for better view
    ),
    margin = list(l = 1, r = 50, b = 100, t = 100),  # Increase left margin to avoid axis cut off
    font = list(size = 18, family = 'Arial', color = 'black', bold = TRUE),
    title = list(text = "XI", font = list(size = 40, bold = TRUE))
  )

# Show plot
pcoa_plot

# Save the 3D plot as an HTML file first to use with webshot
html_file <- "pcoa_plot.html"
htmlwidgets::saveWidget(pcoa_plot, html_file)

# Define different camera angles
camera_angles <- list(
  list(eye = list(x = 2, y = 2, z = 1.5)), # Angle 1
  list(eye = list(x = -2, y = 2, z = 1.5)), # Angle 2
  list(eye = list(x = 2, y = -2, z = 1.5)), # Angle 3
  list(eye = list(x = 2, y = 2, z = -1.5)), # Angle 4
  list(eye = list(x = -2, y = -2, z = -1.5)) # Angle 5
)

# Loop through the camera angles to capture screenshots
for (i in 1:length(camera_angles)) {
  plot_snapshot <- pcoa_plot %>%
    layout(scene = list(camera = camera_angles[[i]])) # Apply camera angle
  
  # Save the updated plot with the new camera angle as an HTML file
  temp_html_file <- paste0("pcoa_plot_angle_", i, ".html")
  htmlwidgets::saveWidget(plot_snapshot, temp_html_file)

  # Take a screenshot of the plot and save it as PNG
  webshot(temp_html_file, file = paste0("pcoa_snapshot_angle_", i, ".png"), vwidth = 1200, vheight = 1200, zoom = 3)
}

# Perform PERMANOVA and Homogeneity of Dispersion Analysis
perform_permanova_and_betadisper <- function(pcoa_result, sheet_name, grouping) {
  dist_matrix <- pcoa_result$dist_matrix_genus
  
  # PERMANOVA
  permanova_result <- adonis2(dist_matrix ~ grouping, permutations = 999)
  cat(paste("PERMANOVA for", sheet_name, ":\n"))
  print(permanova_result)
  
  # Homogeneity of dispersion (betadisper)
  betadisper_result <- betadisper(dist_matrix, grouping)
  cat(paste("\nHomogeneity of Dispersion for", sheet_name, ":\n"))
  print(anova(betadisper_result))
}

# Enzyme names for PERMANOVA analysis
enzyme_names <- condition_names  # Assuming the conditions match enzyme names

# Perform and display PERMANOVA and betadisper results
mapply(function(i, enzyme) {
  perform_permanova_and_betadisper(pcoa_results_list[[i]], enzyme, groupings[[enzyme]])
}, seq_along(enzyme_names), enzyme_names)

# Perform envfit analysis
perform_envfit <- function(pcoa_result, env_data, condition) {
  # Prepare the scores and environmental data
  scores <- pcoa_result$scores_genus[, 1:2]  # Use the first two axes
  env_data_numeric <- env_data[, sapply(env_data, is.numeric)]
  
  # Run envfit
  fit <- envfit(scores, env_data_numeric, permutations = 999)
  
  # Print the summary of results
  cat(paste("Environmental fitting for", condition, ":\n"))
  print(fit)
  
  return(fit)
}

# Loop through the PCoA results list for each condition
envfit_results <- lapply(seq_along(pcoa_results_list), function(i) {
  condition <- condition_names[i]
  pcoa_result <- pcoa_results_list[[i]]
  env_data <- parameters_normalized[parameters$Site %in% conditions_normalized[[i]]$Site, ]
  
  # Perform envfit for each condition
  perform_envfit(pcoa_result, env_data, condition)
})

# Plot with environmental vectors
for (i in seq_along(envfit_results)) {
  fit <- envfit_results[[i]]
  scores <- pcoa_results_list[[i]]$scores_genus
  
  # Create a base plot
  p <- plot_ly()
  
  # Add points for the PCoA scores
  p <- p %>% add_trace(
    x = scores$V1, y = scores$V2,
    type = 'scatter',
    mode = 'markers',
    marker = list(size = 6),
    color = I(color_mapping[condition_names[i]]),
    name = condition_names[i]
  )
  
  # Add vectors from envfit
  arrows <- fit$vectors$arrows * 0.5  # Scale the arrows for visibility
  arrow_start_x <- rep(0, nrow(arrows))  # Start at the origin (or adjust to centroids if needed)
  arrow_start_y <- rep(0, nrow(arrows))  # Start at the origin (or adjust to centroids if needed)

  for (j in 1:nrow(arrows)) {
    p <- p %>% add_segments(
      x = arrow_start_x[j], 
      y = arrow_start_y[j], 
      xend = arrow_start_x[j] + arrows[j, 1], 
      yend = arrow_start_y[j] + arrows[j, 2],
      line = list(width = 2, color = 'red'),
      showlegend = FALSE
    )
  }

  # Customize layout
  p <- p %>% layout(
    title = paste("PCoA with Environmental Vectors -", condition_names[i]),
    xaxis = list(title = xaxis_title_genus),
    yaxis = list(title = yaxis_title_genus)
  )
  
  # Show plot
  p
}
